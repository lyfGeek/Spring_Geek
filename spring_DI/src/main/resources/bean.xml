<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- Spring 的依赖注入。
        Dependency Injection。
        IOC 的作用：降低程序间的耦合（依赖关系）。
        依赖关系的管理以后交给 Spring 来维护。
        在当前类要用到的其他类的对象，由 Spring 为我们提供，我们只要在配置文件中说明。
        依赖关系的维护
            称之为 依赖注入。
        依赖注入：
            能注入的数据有 3 类。
                基本类型和 String。
                其他 bean 类型（在配置文件中或注解配置过的 bean）。
                复杂类型 / 集合类型。
            注入的方式有 3 种。
                构造函数。
                set() 方法。
                注解。
    -->

    <!-- 构造函数注入。-->
    <!--<bean id="accountService" class="AccountServiceImpl"/>-->
    <!-- 此方法是用默认构造函数。-->
    <!-- bean 标签中使用标签：constructor-arg。-->
    <bean id="accountService" class="AccountServiceImpl">
        <!--
            标签中的属性。
                type ——> 用于指定要注入的数据的数据类型，该数据类型是构造函数中某个或某些参数的类型。
                index ——> 用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引从 0 开始。
                name ——> 用于指定给构造函数中指定名称的参数赋值。——> 常用。
                ～ ～ ～ ～ ～ ～ 以上三个用于指定给构造函数中哪个参数赋值。
                value ——> 用于提供基本类型和 String 类型的数据。
                ref ——> 用于指定其他的 bean 类型数据。ta 指的就是在 Spring 的 IoC 核心容器中出现过的 bean 对象 。

            优势。
                在获取 bean 对象时，注入数据必须的操作，否则对象无法成功创建。
            弊端。
                改变了 bean 对象实例化的方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
        -->
        <constructor-arg name="name" value="test"/>
        <constructor-arg name="age" value="25"/>
        <!--<constructor-arg name="birthday" value="1970-01-01"/>&lt;!&ndash; 'java.util.Date'&ndash;&gt;-->
        <constructor-arg name="birthday" ref="now"/><!-- 'java.util.Date'-->
    </bean>

    <!-- 配置一个日期对象。-->
    <bean id="now" class="java.util.Date"/>


    <!-- set(); 方法注入。
        涉及的标签：<property>
        出现的位置：bean 标签的内部。
        优势。
            创建对象时没有明确的限制，可以直接使用默认构造函数。
        弊端。
            如果有某个成员变量必须有值，则获取对象时 set(); 方法有可能没有执行。
    -->
    <bean id="accountService02" class="com.geek.service.impl.AccountServiceImpl02">
        <!-- 标签的属性。
                name ——> 用于指定注入时所调用的 set(); 方法名称。
                value ——> 用于提供基本类型和 String 类型的数据。
                ref ——> 用于指定其他的 bean 类型数据。ta 指的就是在 Spring 的 IoC 核心容器中出现过的 bean 对象 。
        -->
        <property name="name" value="泰斯特"/>
        <property name="age" value="21"/>
        <property name="birthday" ref="now"/>

    </bean>

    <!-- 复杂类型的注入。（集合类型）。-->
    <bean id="accountService03" class="com.geek.service.impl.AccountServiceImpl03">
        <property name="myStrings">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>

        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>

        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>

        <!--        <property name="myMap">
                    <map>
                        <entry key="test" value="aaa"/>
                    </map>
                </property>-->
        <property name="myMap">
            <map>
                <entry key="test">
                    <value>bbb</value>
                </entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="testC">ccc</prop>
                <prop key="testD">ddd</prop>
            </props>
        </property>
    </bean>

</beans>
