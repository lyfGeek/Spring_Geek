<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置 Spring IoC。配置 Service 对象。-->
    <bean id="accountService" class="com.geek.service.impl.AccountServiceImpl"/>

    <!-- Spring 中基于 xml 的 aop 配置。
        把通知 Bean （Logger 类）交给 Spring 管理。
        使用 <aop:config> 标签表明开始 AOP 配置。
        使用 <aop:aspect> 标签表明配置切面。
            id 属性～给切面一个唯一标识。
            ref 属性～指定通知类 Bean 的 id。
        在 <aop:aspect> 标签内部使用对应标签来配置通知的类型。
            <aop:before> ——> 前置通知。
                method 属性 ——> 用于指定 Logger 类中哪个方法是通知。
                pointCut 属性 ——> 用于指定切入点表达式。——> 对业务层的哪个方法增强。

        切入点表达式。
            execution(表达式)
            表达式。
                访问修饰符 返回值 包名.包名.....类名.方法名(参数列表)
        访问修饰符可以省略。
            public void com.geek.service.impl.AccountServiceImpl.saveAccount()
        返回值可以使用 * 表示任意返回值。
            * com.geek.service.impl.AccountServiceImpl.saveAccount()
        包名可以使用通配符。表示任意包，但是有几级包就要写几个 * 。
            * *.*.*.AccountServiceImpl.saveAccount()
        .. ——> 表示当前包及其子包。
            * *..AccountServiceImpl.saveAccount()
        类名和方法名都可以使用 * 通配。
            * *..*.*()
        参数列表可以专题直接写数据类型。
            基本类型直接写名称。
            引用类型写包名.类名的方法。java.lang.String
        任意类型（但是有参数）。——> ..
            ↓ ↓ ↓
            * *..*.*(..)
    -->

    <!-- 配置 Logger 类。-->
    <bean id="logger" class="com.geek.log.Logger"/>

    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知类型，并且建立通知方法和切入点方法的关联。-->
            <aop:before method="printLog"
                        pointcut="execution(* *..AccountServiceImpl.saveAccount())"/>
            <!--pointcut="execution(* *..*.*(..))"/>-->
            <!--pointcut="execution(public void com.geek.service.impl.AccountServiceImpl.saveAccount())"/>-->

        </aop:aspect>
    </aop:config>
</beans>
