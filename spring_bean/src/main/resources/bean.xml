<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 把对象的创建权交给 Spring 来管理。-->
    <!-- Spring 对 bean 的 管理细节。
        创建 bean 的三种方式。
        bean 对象的作用范围。
        bean 对象的生命周期。
    -->

    <!-- 创建 bean 的三种方式。
        在 Spring 的配置文件中使用 bean 标签，配置 id 和 class 之后，且没有其他属性和标签时，
        使用的就是默认构造函数创建 bean 对象。此时如果类中没有默认构造函数则对象无法创建。
    -->
    <!--<bean id="accountService" class="AccountServiceImpl"></bean>-->

    <!--WARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'accountService' defined in class path resource [bean.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [AccountServiceImpl]: No default constructor found; nested exception is java.lang.NoSuchMethodException: AccountServiceImpl.<init>()-->


    <!--
        &lt;!&ndash;  * 模拟一个工厂类。（该类可能是存在于 jar 包中的，我们无法通过修改源码的方式来提供默认构造函数）。
        使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入 Spring 容器中）。
    &ndash;&gt;
        <bean id="instanceFactory" class="com.geek.factory.InstanceFactory"/>
        <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>
    -->

    <!-- 方法 3。
        使用工厂中的静态方法创建对象。（使用某个类中的静态方法创建对象，并存入 Spring 容器）。
    -->
    <!--<bean id="accountService" class="com.geek.factory.StaticInstanceFactory" factory-method="getAccountService"/>-->


    <!-- bean 的作用范围。
        使用 bean 标签的 scope 属性指定。
    -->
    <!--    <bean id="accountService" class="AccountServiceImpl"
              scope="prototype"
        />-->

    <bean id="accountService" class="AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"/>

</beans>
